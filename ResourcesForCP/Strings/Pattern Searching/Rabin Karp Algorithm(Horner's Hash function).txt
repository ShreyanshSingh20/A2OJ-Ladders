//TC==>O(m*(n-m+1)) but on average, better than naive approach

package strings;

import java.util.*;

public class RKAGoodHashFunction {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String str = sc.nextLine();
		String pat = sc.nextLine();
		int n = str.length();
		int m = pat.length();

		int q = 101;// a prime number which is very high
		int d = 5;// can be anything
		int h = 1;

		for (int i = 0; i < m - 1; i++) {
			h = (h * d) % q;
		}

		int p = 0;// hash fuction of pattern
		int t = 0;// hash function of string

		for (int i = 0; i < m; i++) {
			p = (p * d + pat.charAt(i)) % q;// computes p
			t = (t * d + str.charAt(i)) % q;// computes t at index 0 of window length m
		}

		for (int i = 0; i < n - m + 1; i++) {

			if (p == t) {
				boolean flag = true;
				for (int j = 0; j < m; j++) {
					if (str.charAt(i + j) != pat.charAt(j)) {
						flag = false;
						break;
					}

				}
				if (flag == true)
					System.out.print(i + " ");
			}

			if (i < n - m) {
				t = (d * (t - str.charAt(i) * h) + str.charAt(i + m)) % q;
				if (t < 0)
					t = t + q;
			}
		}

	}

}
